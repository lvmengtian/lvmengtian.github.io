import{_ as y,c,b as h,d as i,a as e,w as l,e as s,r as k,o}from"./app-DXbDeTcx.js";const A="/images/throwable-class.png",D="/images/jdk.png",B={};function u(v,a){const d=k("font"),p=k("VPCollapseItem"),g=k("VPCollapse"),r=k("CodeTabs");return o(),c("div",null,[a[12]||(a[12]=h('<h2 id="java的基本类型以及取值范围" tabindex="-1"><a class="header-anchor" href="#java的基本类型以及取值范围"><span>java的基本类型以及取值范围</span></a></h2><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h3><p>Java包含8种基本类型，分别是：</p><ul><li>整数类型：byte、short、int、long</li><li>浮点数类型：float、double</li><li>字符类型：char</li><li>布尔类型：boolean</li></ul><h3 id="取值范围" tabindex="-1"><a class="header-anchor" href="#取值范围"><span>取值范围</span></a></h3><p>想了解这些类型的取值范围，就要先知道不同类型所占用的字节数。在此之前我们先了解一下字节的概念。 在计算机存储中，最小的存储单位是字节（Byte）。一个字节包含8位二进制数，每个二进制数就是1bit； 即<code>1Byte = 8bit</code>。一个字节取值范围使用二进制表示就是 <code>00000000~11111111</code>，换成十进制就是<code>0 ~ 255</code>。 现在我们再来看不同类型所占的字节数以及取值范围：</p><table><thead><tr><th>类型描述</th><th>类型</th><th>字节数</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1（8bit）</td><td>-128~127（-2<sup>7</sup>～2<sup>7</sup>-1）</td></tr><tr><td>短整型</td><td>short</td><td>2（16bit）</td><td>-32768~32767（-2<sup>15</sup>～2<sup>15</sup>-1）</td></tr><tr><td>整型</td><td>int</td><td>4（32bit）</td><td>-2<sup>31</sup>～2<sup>31</sup>-1</td></tr><tr><td>长整型</td><td>long</td><td>8（64bit）</td><td>-2<sup>63</sup>～2<sup>63</sup>-1</td></tr><tr><td>单精度浮点型</td><td>float</td><td>4（32bit）</td><td></td></tr><tr><td>双精度浮点型</td><td>double</td><td>8（64bit）</td><td></td></tr><tr><td>字符型</td><td>char</td><td>2（16bit）</td><td></td></tr><tr><td>布尔型</td><td>boolean</td><td>1（8bit）</td><td>true 或 false</td></tr></tbody></table>',7)),i("blockquote",null,[i("p",null,[i("strong",null,[e(d,{color:"red"},{default:l(()=>[...a[0]||(a[0]=[s("是如何确定取值范围的？（以byte为例）",-1)])]),_:1})])]),a[1]||(a[1]=i("p",null,[s("因为Java是有符号的，所以最高位是用来表示符号的，（0-表示正数 1-表示负数）。所以真正表示数值的就只有7个二进制位。所以取值范围的二进制表示理应是"),i("code",null,"11111111 ~ 01111111"),s("，即"),i("code",null,"-128 ~ 128"),s("。但是，数值在计算机中是以补码的方式存储的。什么是补码？ 了解了什么是补码后，会发现01111111是无法表达出来的，所以需要减去1，即变成"),i("code",null,"01111110"),s("。也就是byte的取值范围是"),i("code",null,"-128 ~ 127")],-1))]),a[13]||(a[13]=h('<h2 id="面向对象的基本特性" tabindex="-1"><a class="header-anchor" href="#面向对象的基本特性"><span>面向对象的基本特性？</span></a></h2><p>面向对象基本特性是：<strong>封装</strong>、<strong>集成</strong>、<strong>多态</strong></p><ol><li><strong>封装</strong>：将数据（属性）和操作数据的方法（行为）封装在一起，形成一个独立的“对象”。同时，对外部隐藏对象的内部实现细节，只暴露有限的、安全的接口进行交互。</li><li><strong>继承</strong>：允许一个类（子类、派生类）继承另一个现有类（父类、基类、超类）的属性和方法。子类可以复用父类的功能，并可以扩展出自己特有的属性和方法。</li><li><strong>多态</strong>：指同一个行为（方法）具有多个不同表现形式或形态的能力。具体来说，允许父类的引用指向子类的对象，并且根据这个引用指向的实际对象类型来调用相应的方法。</li></ol>',3)),e(g,null,{default:l(()=>[e(p,{expand:"",index:0},{title:l(()=>[...a[2]||(a[2]=[s("示例代码",-1)])]),default:l(()=>[a[3]||(a[3]=i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-java"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 父类")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Animal"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 【封装】属性被封装到Animal里面，外部不可以直接访问；必须通过getName方法访问")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    private"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," String"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Animal"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"String "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A65E2B","--shiki-dark":"#C99076"}},"        this"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," String "),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"getName"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"      return"),i("span",{style:{"--shiki-light":"#A65E2B","--shiki-dark":"#C99076"}}," this"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," eat"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," is eating."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," sleep"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," is sleeping."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 【继承】子类 Dog 继承自 Animal")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Dog"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," extends"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Animal"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // 使用 extends 关键字")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Dog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"String "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A65E2B","--shiki-dark":"#C99076"}},"        super"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // 调用父类的构造方法")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 子类特有的方法")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," bark"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"getName"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," +"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," says: Woof!"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 【多态】子类重写父类的eat方法，让其具备子类的特点")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," eat"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Dog is eating."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 使用")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"Dog"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," myDog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," new"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Dog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Buddy"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"myDog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"eat"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"();"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"   // 继承自Animal的方法")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"myDog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"sleep"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"();"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // 因为Dog重写了，所以这里是Dog自己的方法")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"myDog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"bark"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"();"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"  // Dog自己的方法")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1))]),_:1})]),_:1}),a[14]||(a[14]=h(`<h2 id="什么是强引用、软引用、弱引用、虚引用" tabindex="-1"><a class="header-anchor" href="#什么是强引用、软引用、弱引用、虚引用"><span>什么是强引用、软引用、弱引用、虚引用？</span></a></h2><p>我们来详细讲解一下Java中的四种引用类型：强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）。</p><p>这四种引用类型的强度依次递减，它们与Java的垃圾回收（Garbage Collection, GC）行为密切相关，主要用于管理对象的内存生命周期，是实现内存敏感缓存、防止内存泄漏的强大工具。</p><hr><h3 id="_1-强引用-strong-reference" tabindex="-1"><a class="header-anchor" href="#_1-强引用-strong-reference"><span>1. 强引用 (Strong Reference)</span></a></h3><p><strong>定义</strong>： 强引用是程序中最普遍、默认的引用类型。我们平常使用<code>new</code>关键字创建的对象，赋值给一个变量，这个变量就是该对象的<strong>强引用</strong>。</p><p><strong>语法</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // obj 就是新Object对象的强引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特点与作用</strong>：</p><ul><li><strong>可达性</strong>：只要强引用还存在（即引用变量<code>obj</code>还在作用域内且没有被显式地赋值为<code>null</code>），垃圾收集器就<strong>永远不会</strong>回收掉被引用的对象。</li><li><strong>内存泄漏</strong>：如果一段不必要的强引用长期存在（例如，一个静态Map缓存了不再使用的对象），会导致这些对象无法被回收，从而引发<strong>内存泄漏</strong>。</li><li><strong>作用</strong>：构成程序正常运行的基石，用于表示那些“必须存活”的对象。</li></ul><hr><h3 id="_2-软引用-soft-reference" tabindex="-1"><a class="header-anchor" href="#_2-软引用-soft-reference"><span>2. 软引用 (Soft Reference)</span></a></h3><p><strong>定义</strong>： 软引用用来描述一些<strong>还有用但并非必需</strong>的对象。</p><p><strong>语法</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建强引用</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> strongRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用强引用创建软引用</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SoftReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> softRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SoftReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strongRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 为了让它能被回收，取消强引用</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strongRef </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 之后可以通过softRef.get()来尝试获取对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> softRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">obj </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 对象尚未被回收</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 对象已被回收</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点与作用</strong>：</p><ul><li><strong>回收时机</strong>：在系统<strong>内存充足</strong>时，垃圾收集器不会回收软引用关联的对象。</li><li><strong>内存敏感</strong>：当系统<strong>内存不足</strong>，即将发生<code>OutOfMemoryError</code>之前，垃圾收集器会把这些仅被软引用关联的对象列入回收范围进行第二次回收。如果这次回收后还是没有足够的内存，才会抛出内存溢出异常。</li><li><strong>作用</strong>：非常适合实现<strong>内存敏感的缓存</strong>。例如，缓存图片、大文本等数据。当内存吃紧时，缓存会被自动释放，避免OOM；当内存充足时，缓存又能提高性能。 <ul><li><code>SoftReference</code> 非常适合用来做缓存，例如缓存图片等大对象。</li></ul></li></ul><hr><h3 id="_3-弱引用-weak-reference" tabindex="-1"><a class="header-anchor" href="#_3-弱引用-weak-reference"><span>3. 弱引用 (Weak Reference)</span></a></h3><p><strong>定义</strong>： 弱引用用来描述<strong>非必需</strong>的对象，但其强度比软引用更弱。</p><p><strong>语法</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> strongRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">WeakReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> weakRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> WeakReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strongRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strongRef </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 取消强引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 强制触发GC（仅作演示，生产中慎用）</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">gc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// GC后，weakRef.get()有很大概率返回null</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">weakRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 侥幸存活</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 已被回收</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点与作用</strong>：</p><ul><li><strong>回收时机</strong>：<strong>无论内存是否充足</strong>，只要垃圾收集器开始工作，并且发现对象<strong>只被弱引用关联</strong>（没有任何强引用或软引用关联它），就会立刻回收该对象。</li><li><strong>作用</strong>： <ol><li><strong>规范化映射（Canonicalized Mapping）</strong>：最经典的用途是在<code>WeakHashMap</code>类中。在<code>WeakHashMap</code>中，键（Key）是弱引用的。一旦某个键对象在外面没有强引用了，它就会被GC回收，然后这个键值对也会自动从<code>WeakHashMap</code>中被移除。这完美地解决了Map生命周期长于Key对象而引发的内存泄漏问题。</li><li><strong>监控对象</strong>：用于构建一种“监视”结构，该结构不应阻止其键/元素被回收。</li></ol></li></ul><hr><h3 id="_4-虚引用-phantom-reference" tabindex="-1"><a class="header-anchor" href="#_4-虚引用-phantom-reference"><span>4. 虚引用 (Phantom Reference)</span></a></h3><p><strong>定义</strong>： 虚引用也称为“幽灵引用”或“幻影引用”，是<strong>最弱</strong>的一种引用关系。一个对象是否有虚引用存在，完全不会对其生存时间构成影响。</p><p><strong>语法</strong>： 虚引用必须和<strong>引用队列（ReferenceQueue）</strong> 联合使用。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ReferenceQueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ReferenceQueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> strongRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PhantomReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> phantomRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PhantomReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strongRef</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">strongRef </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ... 之后某个时间</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 强制GC</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">gc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 检查引用队列</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">poll</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ref </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 这意味着ref所指的对象已经被GC回收了</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 可以在这里执行一些清理工作，例如关闭该对象持有的本地资源</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点与作用</strong>：</p><ul><li><strong>无法获取对象</strong>：<code>phantomRef.get()</code>方法<strong>总是返回<code>null</code></strong>。这意味着你根本无法通过虚引用来获取对象的实例。</li><li><strong>回收跟踪</strong>：虚引用的唯一目的就是<strong>跟踪对象被垃圾回收的事件</strong>。当垃圾收集器准备回收一个对象时，如果发现它还有虚引用，就会在回收该对象<strong>之后</strong>，将这个虚引用加入到与之关联的引用队列中。</li><li><strong>作用</strong>： <ul><li>用于在对象被GC<strong>之后</strong>，收到一个系统通知。</li><li>主要用于执行一些<strong>复杂的、特殊的资源清理工作</strong>。例如，在NIO中，<code>DirectByteBuffer</code>对象分配的是堆外内存，Java的GC管不到这块内存。它就可以使用虚引用来进行跟踪：当<code>DirectByteBuffer</code>对象被回收后，相应的虚引用会被放入队列，然后后台的清理线程（如<code>Cleaner</code>）可以从队列中获取到这个通知，进而释放掉那块堆外内存，防止内存泄漏。</li></ul></li></ul><hr><h3 id="总结对比" tabindex="-1"><a class="header-anchor" href="#总结对比"><span>总结对比</span></a></h3><table><thead><tr><th style="text-align:left;">引用类型</th><th style="text-align:left;">强度</th><th style="text-align:left;">被垃圾回收的时机</th><th style="text-align:left;"><code>get()</code> 方法</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>强引用</strong></td><td style="text-align:left;">最强</td><td style="text-align:left;"><strong>永不回收</strong>（只要强引用存在）</td><td style="text-align:left;">返回对象本身</td><td style="text-align:left;">程序默认引用，所有正常对象。</td></tr><tr><td style="text-align:left;"><strong>软引用</strong></td><td style="text-align:left;">次之</td><td style="text-align:left;"><strong>内存不足时</strong>进行回收</td><td style="text-align:left;">返回对象本身（若未被回收）</td><td style="text-align:left;">实现内存敏感的高速缓存。</td></tr><tr><td style="text-align:left;"><strong>弱引用</strong></td><td style="text-align:left;">较弱</td><td style="text-align:left;"><strong>下一次GC时</strong>即被回收</td><td style="text-align:left;">返回对象本身（若未被回收）</td><td style="text-align:left;">实现规范化映射（如<code>WeakHashMap</code>），防止内存泄漏。</td></tr><tr><td style="text-align:left;"><strong>虚引用</strong></td><td style="text-align:left;">最弱</td><td style="text-align:left;"><strong>不影响生命周期</strong>，用于跟踪回收事件</td><td style="text-align:left;"><strong>总是返回null</strong></td><td style="text-align:left;">在对象被回收后收到通知，进行特殊的资源清理。</td></tr></tbody></table><p><strong>核心思想</strong>：通过使用不同强度的引用，开发者可以与垃圾收集器进行“沟通”，更精细地控制对象的生命周期，从而在实现特定功能（如缓存）的同时，有效避免内存泄漏的风险。</p><h2 id="integer、long里面的cache有什么区别" tabindex="-1"><a class="header-anchor" href="#integer、long里面的cache有什么区别"><span>Integer、Long里面的cache有什么区别？</span></a></h2><p>通过直接查看IntegerCache和LongCache的源码就可发现区别。</p>`,37)),e(r,{id:"473",data:[{id:"IntegerCache源码"},{id:"LongCache源码"}]},{title0:l(({value:n,isActive:t})=>[...a[4]||(a[4]=[i("span",null,"IntegerCache源码",-1)])]),title1:l(({value:n,isActive:t})=>[...a[5]||(a[5]=[i("span",null,"LongCache源码",-1)])]),tab0:l(({value:n,isActive:t})=>[...a[6]||(a[6]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-java"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"  /**")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* Cache to support the object identity semantics of autoboxing for values between")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* -128 and 127 (inclusive) as required by JLS.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"*")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* The cache is initialized on first usage.  The size of the cache")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* may be controlled by the {@code -XX:AutoBoxCacheMax=<size>} option.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* During VM initialization, java.lang.Integer.IntegerCache.high property")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* may be set and saved in the private system properties in the")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"* sun.misc.VM class.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"*/")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"private"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," IntegerCache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," final"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," low"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," -"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}},"128"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," final"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," high"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," final"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," Integer"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," cache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"[];")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"        // high value may be configured by property")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"        int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," h"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 127"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"        String"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," integerCacheHighPropValue"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," =")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"            sun"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"misc"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"VM"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"getSavedProperty"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"java.lang.Integer.IntegerCache.high"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"        if"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"integerCacheHighPropValue "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"!="),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," null"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"            try"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"                int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," i"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," parseInt"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"integerCacheHighPropValue"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"                i "),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"="),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," Math"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"max"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"i"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 127"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"                // Maximum array size is Integer.MAX_VALUE")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"                h "),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"="),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," Math"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"min"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"i"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," Integer"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"MAX_VALUE"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," -"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ("),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"-"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"low"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," -"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}},"1"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"            }"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," catch"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," NumberFormatException "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"nfe"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"                // If the property cannot be parsed into an int, ignore it.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"        high "),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"="),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," h"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"        cache "),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"="),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," new"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," Integer"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"[("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"high "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"-"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," low"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," +"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 1"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"];")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"        int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," j"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," low"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"        for"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," k"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 0"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," k "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"<"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," cache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"length"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," k"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"++"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"            cache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"["),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"k"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"]"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," new"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Integer"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"j"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"++"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"        // range [-128, 127] must be interned (JLS7 5.1.7)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"        assert"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," IntegerCache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"high"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," >="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 127"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    private"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," IntegerCache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {}")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),tab1:l(({value:n,isActive:t})=>[...a[7]||(a[7]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-java"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"  private"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," LongCache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    private"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," LongCache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"(){}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," final"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," Long"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," cache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"[]"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," new"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," Long"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"["),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"-"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"-"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}},"128"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," +"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 127"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," +"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 1"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"];")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"        for"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," i"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 0"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," i "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"<"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," cache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"length"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," i"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"++"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"            cache"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"["),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"i"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"]"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}}," new"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Long"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"i "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"-"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 128"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),_:1}),a[15]||(a[15]=h('<p><strong>通过源码可以看出Long的缓存就是固定的[-128, 127]的范围；Integer的缓存默认是[-128, 127]，但是上限可以通过参数进行配置。</strong></p><h2 id="接口和抽象类的区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象类的区别"><span>接口和抽象类的区别？</span></a></h2><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ul><li><strong>抽象类</strong>：是对一类事物的<strong>抽象</strong>，即对<strong>类的抽象</strong>。它表示的是“<strong>is-a</strong>”（是一个）的关系。例如，<code>Animal</code>是一个抽象类，<code>Dog</code> <em>是一个</em> <code>Animal</code>。</li><li><strong>接口</strong>：是对行为的<strong>抽象</strong>，即对<strong>行为的抽象</strong>。它表示的是“<strong>can-do</strong>”（能做什么）的关系。例如，<code>Flyable</code>是一个接口，<code>Bird</code> <em>能</em> <code>Fly</code>（实现<code>Flyable</code>接口）。</li></ul><hr><h3 id="详细区别对比" tabindex="-1"><a class="header-anchor" href="#详细区别对比"><span>详细区别对比</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">抽象类 (Abstract Class)</th><th style="text-align:left;">接口 (Interface) (Java 8以前)</th><th style="text-align:left;">接口 (Java 8及以后)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>定义关键字</strong></td><td style="text-align:left;"><code>abstract class</code></td><td style="text-align:left;"><code>interface</code></td><td style="text-align:left;"><code>interface</code></td></tr><tr><td style="text-align:left;"><strong>成员变量</strong></td><td style="text-align:left;">可以是<strong>任何</strong>类型的变量（普通变量、静态常量、静态变量）</td><td style="text-align:left;"><strong>默认</strong>且<strong>只能是</strong> <code>public static final</code> 的常量</td><td style="text-align:left;"><strong>默认</strong>且<strong>只能是</strong> <code>public static final</code> 的常量</td></tr><tr><td style="text-align:left;"><strong>构造方法</strong></td><td style="text-align:left;"><strong>有</strong>构造方法（用于子类初始化）</td><td style="text-align:left;"><strong>没有</strong>构造方法</td><td style="text-align:left;"><strong>没有</strong>构造方法</td></tr><tr><td style="text-align:left;"><strong>方法实现</strong></td><td style="text-align:left;">可以包含<strong>抽象方法</strong>和<strong>具体实现的方法</strong></td><td style="text-align:left;">所有方法都是<strong>抽象方法</strong>（无方法体）</td><td style="text-align:left;">可以包含 <strong><code>default</code>方法</strong>、<strong><code>static</code></strong> 方法和<strong>抽象方法</strong></td></tr><tr><td style="text-align:left;"><strong>继承</strong></td><td style="text-align:left;">使用 <code>extends</code> 关键字<strong>单继承</strong>（一个子类只能继承一个抽象类）</td><td style="text-align:left;">使用 <code>implements</code> 关键字<strong>多实现</strong>（一个类可以实现多个接口）</td><td style="text-align:left;">使用 <code>implements</code> 关键字<strong>多实现</strong></td></tr><tr><td style="text-align:left;"><strong>设计目的</strong></td><td style="text-align:left;"><strong>代码复用</strong>和<strong>定义模板</strong>。提供基础实现，要求子类“是一个”父类。</td><td style="text-align:left;"><strong>定义契约</strong>和<strong>声明能力</strong>。要求实现类“能做什么”，不关心如何实现。</td><td style="text-align:left;"><strong>定义契约</strong>、<strong>声明能力</strong>并<strong>提供默认实现</strong>（向后兼容）。</td></tr><tr><td style="text-align:left;"><strong>访问修饰符</strong></td><td style="text-align:left;">方法可以使用任意访问修饰符（<code>public</code>, <code>protected</code>, <code>private</code>）</td><td style="text-align:left;">方法<strong>默认</strong>为 <code>public abstract</code>（Java 9起也可为 <code>private</code>)</td><td style="text-align:left;">方法可以是 <code>public abstract</code>, <code>default</code>, <code>public static</code>, <code>private</code> (Java 9+)</td></tr></tbody></table><hr><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3>',9)),e(r,{id:"628",data:[{id:"抽象类示例"},{id:"接口示例"}]},{title0:l(({value:n,isActive:t})=>[...a[8]||(a[8]=[i("span",null,"抽象类示例",-1)])]),title1:l(({value:n,isActive:t})=>[...a[9]||(a[9]=[i("span",null,"接口示例",-1)])]),tab0:l(({value:n,isActive:t})=>[...a[10]||(a[10]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-java"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 抽象类：表示一种“是”的关系")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"abstract"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Animal"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 成员变量（可以是普通的）")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    protected"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," String"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 构造方法")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Animal"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"String "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A65E2B","--shiki-dark":"#C99076"}},"        this"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 具体实现的方法（代码复用）")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," eat"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," is eating."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 抽象方法（由子类实现）")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," abstract"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," makeSound"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Dog"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," extends"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Animal"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Dog"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"String "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A65E2B","--shiki-dark":"#C99076"}},"        super"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    @"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"Override")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," makeSound"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," says: Woof!"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),tab1:l(({value:n,isActive:t})=>[...a[11]||(a[11]=[i("div",{class:"language-java line-numbers-mode","data-highlighter":"shiki","data-ext":"java",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-java"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 接口：表示一种“能”的关系")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"interface"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Flyable"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 常量 (默认 public static final)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    int"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," MAX_ALTITUDE"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 10000"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // 抽象方法 (默认 public abstract)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," fly"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // Default方法 (Java 8+ 提供默认实现，用于向后兼容)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    default"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," takeOff"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Taking off..."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"    // Static方法 (Java 8+)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    static"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," boolean"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," canFly"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"Object "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"obj"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"        return"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," obj "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"instanceof"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," Flyable"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"interface"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Swimmable"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," swim"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"// 一个类可以实现多个接口，表示多种能力")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"class"),i("span",{style:{"--shiki-light":"#2E8F82","--shiki-dark":"#5DA994"}}," Duck"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," extends"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Animal"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," implements"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Flyable"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},","),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Swimmable"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Duck"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"String "),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A65E2B","--shiki-dark":"#C99076"}},"        super"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    @"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"Override")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," makeSound"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," says: Quack!"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    @"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"Override")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," fly"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," is flying not very high."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    @"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"Override")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"    public"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," void"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," swim"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"        System"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"out"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"."),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"println"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"name "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"+"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}}," is swimming in the pond."),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),_:1}),a[16]||(a[16]=h(`<h3 id="如何选择" tabindex="-1"><a class="header-anchor" href="#如何选择"><span>如何选择？</span></a></h3><p>根据你的设计目的来决定使用接口还是抽象类：</p><ul><li><p><strong>使用抽象类，当：</strong></p><ul><li>你想在多个紧密相关的类之间<strong>共享代码</strong>（提供公共的方法实现）。</li><li>你需要定义<strong>非<code>public</code>的成员变量或方法</strong>（<code>protected</code>, <code>private</code>）。</li><li>你需要定义<strong>状态</strong>（成员变量），而不仅仅是行为。</li></ul></li><li><p><strong>使用接口，当：</strong></p><ul><li>你想定义<strong>一个契约</strong>，让<strong>不相关</strong>的类都能实现它。例如，<code>Comparable</code>和<code>Serializable</code>接口可以被任何类实现。</li><li>你希望实现<strong>多重继承</strong>（多重行为）。</li><li>你只想定义<strong>行为</strong>，而不关心具体的实现（在Java 8之前），或者想为这些行为提供默认实现（Java 8之后）。</li></ul></li></ul><h2 id="string、stringbuilder、stringbuffer的区别" tabindex="-1"><a class="header-anchor" href="#string、stringbuilder、stringbuffer的区别"><span>String、StringBuilder、StringBuffer的区别？</span></a></h2><h3 id="核心区别总结" tabindex="-1"><a class="header-anchor" href="#核心区别总结"><span>核心区别总结</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;"><code>String</code></th><th style="text-align:left;"><code>StringBuilder</code></th><th style="text-align:left;"><code>StringBuffer</code></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>可变性</strong></td><td style="text-align:left;"><strong>不可变</strong></td><td style="text-align:left;"><strong>可变</strong></td><td style="text-align:left;"><strong>可变</strong></td></tr><tr><td style="text-align:left;"><strong>线程安全</strong></td><td style="text-align:left;">安全（因为不可变）</td><td style="text-align:left;"><strong>不安全</strong></td><td style="text-align:left;"><strong>安全</strong>（方法有 <code>synchronized</code> 修饰）</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;"><strong>最低</strong>（频繁修改会产生大量垃圾对象）</td><td style="text-align:left;"><strong>最高</strong></td><td style="text-align:left;"><strong>中等</strong>（因线程安全开销略低于String）</td></tr><tr><td style="text-align:left;"><strong>使用场景</strong></td><td style="text-align:left;">操作少量的字符串，或需要保持常量性</td><td style="text-align:left;">单线程下频繁进行字符串修改</td><td style="text-align:left;">多线程下频繁进行字符串修改</td></tr></tbody></table><hr><h3 id="详细解析" tabindex="-1"><a class="header-anchor" href="#详细解析"><span>详细解析</span></a></h3><h4 id="_1-string-不可变字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-不可变字符串"><span>1. String（不可变字符串）</span></a></h4><ul><li><p><strong>核心特点：不可变性</strong> 一旦一个 <code>String</code> 对象被创建，它的值就无法被改变。任何看似修改它的操作（如 <code>concat()</code>, <code>+</code>, <code>substring()</code>），实际上都是<strong>创建了一个全新的 <code>String</code> 对象</strong>，而原来的对象依然存在于内存中。</p></li><li><p><strong>性能影响：</strong> 在循环中进行字符串拼接等操作时，会产生大量中间临时字符串对象，不仅性能低下，还会给垃圾回收器带来压力。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 每次循环都会 new 一个新的String对象，极其低效！</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>线程安全：</strong> 因为不可变，所以天然线程安全。多个线程可以同时读取一个字符串，而不会产生任何问题。</p></li></ul><h4 id="_2-stringbuilder-可变字符串-非线程安全" tabindex="-1"><a class="header-anchor" href="#_2-stringbuilder-可变字符串-非线程安全"><span>2. StringBuilder（可变字符串，非线程安全）</span></a></h4><ul><li><p><strong>核心特点：可变性 &amp; 高性能</strong><code>StringBuilder</code> 内部维护了一个可变的字符数组（<code>char[] value</code>）。当进行追加、插入、删除等操作时，<strong>直接在原数组上进行修改</strong>，只有在容量不足时才会进行扩容（创建一个新的更大数组）。这避免了大量临时对象的创建。</p></li><li><p><strong>性能影响：</strong> 在<strong>单线程</strong>环境下，进行频繁的字符串修改，其性能远高于 <code>String</code>。</p></li><li><p><strong>线程安全：</strong><strong>非线程安全</strong>。它的方法没有使用同步(<code>synchronized</code>)锁，因此效率更高，但不能在多线程环境下共享使用，否则可能导致数据不一致。</p></li></ul><h4 id="_3-stringbuffer-可变字符串-线程安全" tabindex="-1"><a class="header-anchor" href="#_3-stringbuffer-可变字符串-线程安全"><span>3. StringBuffer（可变字符串，线程安全）</span></a></h4><ul><li><p><strong>核心特点：可变性 &amp; 线程安全</strong><code>StringBuffer</code> 可以看作是 <code>StringBuilder</code> 的线程安全版本。它们的功能API几乎完全一样。</p></li><li><p><strong>性能影响：</strong> 为了保证线程安全，它的所有公开方法都使用了 <code>synchronized</code> 关键字进行同步。这带来了额外的<strong>线程安全开销</strong>，导致其性能在单线程环境下<strong>低于 <code>StringBuilder</code></strong>。</p></li><li><p><strong>线程安全：</strong><strong>线程安全</strong>。可以在多线程环境下安全使用。</p></li></ul><hr><h3 id="性能差异深度分析" tabindex="-1"><a class="header-anchor" href="#性能差异深度分析"><span>性能差异深度分析</span></a></h3><p>性能排序（在字符串修改操作中）： <strong><code>StringBuilder</code> &gt; <code>StringBuffer</code> &gt; <code>String</code></strong></p><p><strong>为什么？</strong></p><ol><li><p><strong><code>String</code> vs 可变类（<code>StringBuilder/Buffer</code>）</strong>：</p><ul><li><code>String</code> 的每次修改都涉及新对象的创建、数组拷贝和旧对象的回收。</li><li>可变类只在必要时（容量不足时）扩容，大部分操作都是原地修改，开销小得多。</li></ul></li><li><p><strong><code>StringBuilder</code> vs <code>StringBuffer</code></strong>：</p><ul><li><code>StringBuffer</code> 的 <code>synchronized</code> 方法在调用时需要获取和释放<strong>锁（monitor lock）</strong>，即使在单线程无竞争的情况下，这个操作也有一定的性能损耗。</li><li><code>StringBuilder</code> 没有这个开销，因此速度更快。Java 虚拟机（JVM）可以对 <code>StringBuilder</code> 的方法进行更好的优化（如内联）。</li></ul></li></ol><p><strong>一个简单的性能测试示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> PerformanceTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // String 测试</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> startTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> endTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">String 耗时: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endTime </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> startTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ms</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // StringBuilder 测试</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        startTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        StringBuilder</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> StringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        endTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">StringBuilder 耗时: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endTime </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> startTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ms</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // StringBuffer 测试</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        startTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        StringBuffer</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sbf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> StringBuffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            sbf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        endTime </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">StringBuffer 耗时: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endTime </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> startTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ms</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果会清晰显示性能差距（<code>String</code> 会慢好几个数量级）。</p><hr><h3 id="使用场景推荐" tabindex="-1"><a class="header-anchor" href="#使用场景推荐"><span>使用场景推荐</span></a></h3><ol><li><p><strong>使用 <code>String</code>：</strong></p><ul><li><strong>不需要改变</strong>的字符串常量或字符串字面量（例如，定义消息、配置键等）。</li><li>字符串操作非常少的情况。</li><li>因为其不可变性，作为 <code>HashMap</code> 的键非常安全。</li></ul></li><li><p><strong>使用 <code>StringBuilder</code> (首选的可变字符串类)：</strong></p><ul><li><strong>单线程</strong>环境下，需要<strong>频繁进行字符串拼接、修改、删除</strong>等操作。</li><li>例如：在循环中动态构建SQL语句、拼接URL参数、处理大型文本等。</li><li><strong>95% 的情况你都应该使用它</strong>，因为大部分字符串操作都发生在方法内部（局部变量，线程安全）。</li></ul></li><li><p><strong>使用 <code>StringBuffer</code> (已逐渐淡出)：</strong></p><ul><li><strong>多线程</strong>环境下，需要频繁修改字符串，并且需要保证线程安全。</li><li>例如：多个线程同时操作同一个字符串缓冲区。</li><li><strong>注意</strong>：在现代Java开发中，即使是在多线程环境下，也往往可以通过线程隔离（如每个线程使用自己的 <code>StringBuilder</code>）或其他同步机制来避免直接使用 <code>StringBuffer</code>，因为它的性能开销通常是不必要的。</li></ul></li></ol><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><ul><li><strong>简单的字符串拼接</strong>：如果拼接操作很少，可以直接用 <code>+</code>，编译器可能会自动优化成 <code>StringBuilder</code>。</li><li><strong>复杂的字符串构建</strong>：<strong>毫不犹豫地使用 <code>StringBuilder</code></strong>。</li><li><strong>初始大小</strong>：如果可以预估最终字符串的大致长度，在创建 <code>StringBuilder</code> 或 <code>StringBuffer</code> 时指定初始容量（如 <code>new StringBuilder(1024)</code>），可以减少扩容次数，进一步提升性能。</li><li><strong>原则</strong>：<strong>除非有明确的、必须的多线程共享修改需求，否则永远优先使用 <code>StringBuilder</code>。</strong></li></ul><h2 id="java异常分类-可检查异常和不可检查异常有什么区别" tabindex="-1"><a class="header-anchor" href="#java异常分类-可检查异常和不可检查异常有什么区别"><span>Java异常分类？可检查异常和不可检查异常有什么区别？</span></a></h2><h3 id="一、java异常的分类体系" tabindex="-1"><a class="header-anchor" href="#一、java异常的分类体系"><span>一、Java异常的分类体系</span></a></h3><p>Java中所有的异常和错误都有一个共同的根父类：Throwable。它有两个直接子类：Error 和 Exception。而 Exception 又分为两大类：可检查异常（Checked Exception） 和 不可检查异常（Unchecked Exception），其中不可检查异常主要指 RuntimeException 及其子类</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span><img src="`+A+`" alt="123"></span></a></h2><h3 id="二、各类异常详解" tabindex="-1"><a class="header-anchor" href="#二、各类异常详解"><span>二、各类异常详解</span></a></h3><h4 id="_1-error-错误" tabindex="-1"><a class="header-anchor" href="#_1-error-错误"><span>1. Error (错误)</span></a></h4><ul><li><strong>定义</strong>：<code>Error</code> 及其子类表示的是应用程序<strong>无法处理</strong>的严重问题，通常与代码编写者无关，而是JVM运行时系统本身的问题（如系统资源耗尽）。</li><li><strong>特点</strong>： <ul><li>是 <strong>不可检查异常（Unchecked）</strong>，编译器不会要求你捕获或声明它们。</li><li>应用程序<strong>不应该尝试捕获</strong>（<code>catch</code>）它们，因为即使捕获了，通常也无法让程序恢复正常。</li><li>发生<code>Error</code>时，JVM通常会终止线程甚至整个虚拟机。</li></ul></li><li><strong>常见例子</strong>： <ul><li><code>OutOfMemoryError</code>：内存耗尽。</li><li><code>StackOverflowError</code>：栈溢出（如无限递归）。</li><li><code>VirtualMachineError</code>：虚拟机错误。</li></ul></li></ul><h4 id="_2-exception-异常" tabindex="-1"><a class="header-anchor" href="#_2-exception-异常"><span>2. Exception (异常)</span></a></h4><p><code>Exception</code> 及其子类表示的是程序本身<strong>可以处理</strong>的问题。这是我们关注的重点，它分为两类：</p><p><strong>A. 可检查异常 (Checked Exception)</strong></p><ul><li><strong>定义</strong>：除了 <code>RuntimeException</code> 以外的所有 <code>Exception</code> 的子类。</li><li><strong>特点</strong>： <ul><li><strong>编译器会检查（Check）</strong> 它们。如果一个方法可能抛出可检查异常，编译器会<strong>强制</strong>要求方法的使用者要么用 <code>try-catch</code> 块捕获它，要么用 <code>throws</code> 关键字在方法声明中抛出它。<strong>不处理就无法通过编译</strong>。</li><li>通常表示程序<strong>可以预料且可恢复</strong>的问题，例如用户输入错误、文件不存在、网络连接中断等。</li></ul></li><li><strong>常见例子</strong>： <ul><li><code>IOException</code>及其子类（如<code>FileNotFoundException</code>）</li><li><code>SQLException</code></li><li><code>ClassNotFoundException</code></li></ul></li></ul><p><strong>B. 不可检查异常 (Unchecked Exception)</strong></p><ul><li><strong>定义</strong>：主要指 <code>RuntimeException</code> 及其子类。</li><li><strong>特点</strong>： <ul><li>编译器<strong>不会检查</strong>它们。即使方法抛出了不可检查异常，方法声明上也<strong>不需要</strong>用 <code>throws</code> 声明，调用者也<strong>不需要</strong>强制捕获。它们会在运行时自动抛出。</li><li>通常表示程序中的<strong>逻辑错误</strong>或<strong>编程错误</strong>，是程序员应该避免而不是去捕获的bug。</li></ul></li><li><strong>常见例子</strong>： <ul><li><code>NullPointerException</code>：空指针异常。</li><li><code>ArrayIndexOutOfBoundsException</code>：数组下标越界。</li><li><code>IllegalArgumentException</code>：非法参数异常。</li><li><code>ArithmeticException</code>：算术异常（如除以零）。</li><li><code>ClassCastException</code>：类型转换异常。</li></ul></li></ul><hr><h3 id="三、可检查异常-vs-不可检查异常-核心区别" tabindex="-1"><a class="header-anchor" href="#三、可检查异常-vs-不可检查异常-核心区别"><span>三、可检查异常 vs 不可检查异常：核心区别</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">可检查异常 (Checked Exception)</th><th style="text-align:left;">不可检查异常 (Unchecked Exception)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>检查时机</strong></td><td style="text-align:left;"><strong>编译时检查</strong></td><td style="text-align:left;"><strong>运行时检查</strong></td></tr><tr><td style="text-align:left;"><strong>处理强制性</strong></td><td style="text-align:left;"><strong>必须</strong>被捕获或声明抛出，否则<strong>编译错误</strong></td><td style="text-align:left;">不强制处理，可选择性捕获</td></tr><tr><td style="text-align:left;"><strong>包涵类型</strong></td><td style="text-align:left;"><code>Exception</code> 的子类（不包括<code>RuntimeException</code>)</td><td style="text-align:left;"><code>RuntimeException</code> 和 <code>Error</code></td></tr><tr><td style="text-align:left;"><strong>设计初衷</strong></td><td style="text-align:left;">表示<strong>可预见的、可恢复的</strong>问题（如外部错误）</td><td style="text-align:left;">表示<strong>程序员的逻辑错误</strong>或<strong>不可控的系统错误</strong></td></tr><tr><td style="text-align:left;"><strong>代码示例</strong></td><td style="text-align:left;"><code>try-catch</code> 或 <code>throws</code></td><td style="text-align:left;">通常不处理，由程序员修复代码逻辑</td></tr></tbody></table><hr><h3 id="四、如何处理异常-代码示例" tabindex="-1"><a class="header-anchor" href="#四、如何处理异常-代码示例"><span>四、如何处理异常？（代码示例）</span></a></h3><h4 id="_1-处理可检查异常-两种方式" tabindex="-1"><a class="header-anchor" href="#_1-处理可检查异常-两种方式"><span>1. 处理可检查异常（两种方式）</span></a></h4><p><strong>方式一：使用 <code>try-catch</code> 块捕获并处理</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    FileReader</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FileReader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">somefile.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 可能抛出FileNotFoundException</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... 读取文件操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FileNotFoundException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">文件没找到，请检查路径！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 打印异常堆栈跟踪，有助于调试</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二：使用 <code>throws</code> 声明抛出，交给调用者处理</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> readFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws FileNotFoundException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 在方法签名中声明</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    FileReader</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FileReader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">somefile.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 此时，调用readFile()的方法就必须处理这个异常了。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-处理不可检查异常-通常不强制处理-但可以捕获" tabindex="-1"><a class="header-anchor" href="#_2-处理不可检查异常-通常不强制处理-但可以捕获"><span>2. 处理不可检查异常（通常不强制处理，但可以捕获）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 这段代码能通过编译，但运行时会抛出ArithmeticException</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> calculate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 可以选择性捕获，但这不是必须的</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> calculateSafely</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ArithmeticException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">除数不能为零！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 更好的做法是修复逻辑，在除法前检查除数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> calculateBetter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> divisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">divisor </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">除数不能为零！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> divisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、如何选择-最佳实践" tabindex="-1"><a class="header-anchor" href="#五、如何选择-最佳实践"><span>五、如何选择？最佳实践</span></a></h3><ol><li><p><strong>对于可检查异常</strong>：如果你知道如何从错误中<strong>恢复</strong>（如提示用户重新输入文件名），就用 <code>try-catch</code>。如果不知道如何处理，只是想向上汇报，就用 <code>throws</code>。</p></li><li><p><strong>对于不可检查异常</strong>：首要任务不是去捕获它们，而是<strong>通过代码审查和测试来避免它们</strong>（例如，在使用对象前检查是否为<code>null</code>，检查数组下标和除数等）。在系统的顶层（如Controller层或主方法）可以有一个全局的异常处理器来捕获所有未处理的异常，给用户一个友好的错误提示，而不是让程序崩溃。</p></li><li><p><strong>不要生吞异常（Swallowing Exceptions）</strong>：空的 <code>catch</code> 块是极其危险的，它隐藏了错误，让程序在未知的状态下运行，使得调试变得极其困难。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ❌ 绝对不要这样做！</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... 某些操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 什么都不做</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>具体优于泛化</strong>：捕获异常时，应优先捕获最具体的异常类型，而不是直接捕获通用的 <code>Exception</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... 某些操作</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FileNotFoundException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 先捕获具体的</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 处理文件未找到</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">IOException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 再捕获更通用的</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 处理其他IO错误</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="重写和重载的区别-构造函数可以重写吗" tabindex="-1"><a class="header-anchor" href="#重写和重载的区别-构造函数可以重写吗"><span>重写和重载的区别，构造函数可以重写吗</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> talk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">person talk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Student</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stuNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Student</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Student</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stuNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stuNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> stuNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> talk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">student talk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重写：</strong> 需要有继承关系，子类重写父类的方法。一般使用@Override注解标识，不标识也无所谓。上面代码中Student类就重写了Person类的talk方法。</p><p><strong>重载：</strong> 函数名相同，参数个数不同或者参数类型不同。注意方法返回值不同是不算重载的。上面代码中对构造函数就是通过参数个数不同进行重载。</p><p>构造函数不能被重写，因为重写要求方法名一致。而构造函数的方法名就是类名。子类不可能和父类同名，所以也不可能有相同的构造函数。所以构造函数不能重写，但是可以重载。</p><h2 id="介绍一些常用的java工具命令" tabindex="-1"><a class="header-anchor" href="#介绍一些常用的java工具命令"><span>介绍一些常用的Java工具命令</span></a></h2><p>Java自带的命令都在JDK的bin目录下。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>jps</td><td>虚拟机进程状态工具，可以列出虚拟机进程</td></tr><tr><td>jstat</td><td>虚拟机统计信息监视工具，监视虚拟机各种运行状态信息</td></tr><tr><td>jinfo</td><td>Java配置信息工具</td></tr><tr><td>jmap</td><td>生成堆转储快照</td></tr><tr><td>javap</td><td>java字节码信息查看工具</td></tr><tr><td>jstack</td><td>java虚拟机进程堆栈跟踪工具, 制作线程Dump</td></tr><tr><td>jhat</td><td>java虚拟机堆转储快照分析工具</td></tr><tr><td>jconsole</td><td>用于提供JVM活动的图形化视图,包括线程的使用、类的使用和GC活动.</td></tr><tr><td>jvisualvm</td><td>监控JVM的GUI工具,可用来剖析运行的应用,分析JVM堆转储</td></tr></tbody></table><h2 id="jdk、jre、jvm的区别" tabindex="-1"><a class="header-anchor" href="#jdk、jre、jvm的区别"><span>JDK、JRE、JVM的区别</span></a></h2><blockquote><p>参考</p><ol><li><a href="https://www.guru99.com/difference-between-jdk-jre-jvm.html" target="_blank" rel="noopener noreferrer">JDK vs JRE vs JVM in Java – Difference Between Them</a></li></ol></blockquote><p>JDK、JRE、JVM是Java编程语言的核心内容，虽然日常开发中我们不关注这些概念，但是作为一名合格的Java程序员，还是应该了解下它们之间的区别。</p><ul><li>JDK（Java Development Kit，Java开发工具包）包含了JRE以及开发小程序和应用程序所需的编译器和调试器等工具。</li><li>JRE（Java Runtime Environment）包含类库、加载器类和 JVM。如果你想运行Java程序，你需要JRE。 如果你无需开发Java代码，则不需要安装JDK，只需要安装JRE即可运行Java程序。 不过，所有 JDK 版本都捆绑了 Java 运行时环境，因此您无需在 PC 中单独下载并安装 JRE。（即安装JDK的时候也附带了JRE）。</li><li>JVM（Java Virtual Machine）是一个提供运行时环境来驱动Java代码或应用程序的引擎。 它将 Java 字节码转换为机器语言。 JVM 是 Java 运行时环境 (JRE) 的一部分。 在其他编程语言中，编译器为特定系统生成机器代码，所以跨平台特性不是很好。然而，Java 编译器是将 Java 代码编译成 JVM 认识的机器代码，这也是为什么Java支持跨平台。因为更换了平台只要有 JVM，JVM 就认识编译后的机器码。</li></ul><p><strong>具体不同对比如下：</strong></p><table><thead><tr><th>JDK</th><th>JRE</th><th>JVM</th></tr></thead><tbody><tr><td>Java Development Kit</td><td>Java Runtime Environment</td><td>Java Virtual Machine</td></tr><tr><td>JDK是一个软件开发工具包，用于开发Java应用程序</td><td>JRE是一个软件包，提供 Java 类库以及运行 Java 代码所需的组件</td><td>JVM执行Java字节码并提供执行环境。是Java支持跨平台的关键</td></tr><tr><td>包含用于开发、调试和监控 java 代码的工具</td><td>包含 JVM 执行程序所需的类库和其他支持文件</td><td></td></tr><tr><td>JDK包含JRE</td><td>JRE包含JVM</td><td></td></tr><tr><td>JDK 使开发人员能够创建可由 JRE 和 JVM 执行和运行的 Java 程序</td><td>JRE 是 Java 中创建 JVM 的部分</td><td>JVM是执行源代码的Java平台组件</td></tr></tbody></table><p>在下图中可以看出JDK、JRE、JVM三者的包含关系以及具体组成部分： <img src="`+D+'" alt=""></p>',69))])}const m=y(B,[["render",u]]),C=JSON.parse('{"path":"/java-guide/hg5e8awy/","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","createTime":"2025/08/20 21:55:46","permalink":"/java-guide/hg5e8awy/"},"readingTime":{"minutes":24.55,"words":7365},"git":{"createdTime":1756213745000,"updatedTime":1760517441000,"contributors":[{"name":"lvmengtian","username":"lvmengtian","email":"lvmengtian@xiaohongshu.com","commits":4,"avatar":"https://avatars.githubusercontent.com/lvmengtian?v=4","url":"https://github.com/lvmengtian"}]},"filePathRelative":"notes/java-guide/java/base.md","headers":[]}');export{m as comp,C as data};
